// Generated by CoffeeScript 1.8.0
(function() {
  var ProviderLoginDetails, User, bookshelf,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require('./conn');

  bookshelf = require('bookshelf')(knexion);

  User = (function(_super) {
    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.tableName = 'users';

    User.prototype.hasTimestamps = true;

    User.prototype.logins = function() {
      return this.hasMany(ProviderLoginDetails);
    };

    User.tableName = 'users';

    User.createTable = function(t) {
      t.increments('id');
      return t.timestamps();
    };

    return User;

  })(bookshelf.Model);

  ProviderLoginDetails = (function(_super) {
    __extends(ProviderLoginDetails, _super);

    function ProviderLoginDetails() {
      return ProviderLoginDetails.__super__.constructor.apply(this, arguments);
    }

    ProviderLoginDetails.prototype.tableName = 'provider_login_details';

    ProviderLoginDetails.prototype.hasTimestamps = true;

    ProviderLoginDetails.prototype.user = function() {
      return this.belongsTo(User);
    };

    ProviderLoginDetails.tableName = 'provider_login_details';

    ProviderLoginDetails.createTable = function(t) {
      t.string('id').primary();
      t.string('provider');
      t.text('data');
      t.timestamps();
      return t.integer('user_id').unsigned().references('id').inTable('users');
    };

    return ProviderLoginDetails;

  })(bookshelf.Model);


  /*
  
  ProviderLoginDetails = bookshelf.Model.extend
    tableName: 'provider_login_details'
  
    createTable: (t) ->
       *t.increments 'id'
       * Provider unique id
      t.string('id').primary()
      t.string 'provider'
      t.text 'data'
      t.timestamps()
      t.integer('user_id')
        .unsigned()
        .references('id')
        .inTable('users')
         * .onDelete
         * .onUpdate
   */


  /*
  class App extends bookshelf.Model
    tableName: 'apps'
  
     * many ProviderIDSecrets
  
    user: () ->
      @belongsTo User
  
    services: () ->
      @hasMany Service
  
  
  class ProviderIDSecret extends bookshelf.Model
    tableName: 'provider_id_secrets'
  
     * provider
     * client_id
     * client_secret
  
    app: () ->
      @belongsTo App
  
  
  class Service extends bookshelf.Model
    tableName: 'services'
  
    secrets: () ->
      @hasMany ProviderIDSecret
  
    deployments: () ->
      @hasMany ServiceDeployment
  
  
  class ServiceDeployment extends bookshelf.Model
    tableName: 'service_deployments'
  
    service: () ->
      @hasOne Service
   */

  global.bookshelf = bookshelf;

  module.exports.User = User;

  module.exports.ProviderLoginDetails = ProviderLoginDetails;

}).call(this);
