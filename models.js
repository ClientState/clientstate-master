// Generated by CoffeeScript 1.8.0
(function() {
  var App, ProviderIDSecret, ProviderLoginDetails, Service, User, bookshelf,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require('./conn');

  bookshelf = require('bookshelf')(knexion);

  User = (function(_super) {
    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.tableName = 'users';

    User.prototype.hasTimestamps = true;

    User.prototype.logins = function() {
      return this.hasMany(ProviderLoginDetails);
    };

    User.tableName = 'users';

    User.createTable = function(t) {
      t.increments('id');
      return t.timestamps();
    };

    return User;

  })(bookshelf.Model);

  ProviderLoginDetails = (function(_super) {
    __extends(ProviderLoginDetails, _super);

    function ProviderLoginDetails() {
      return ProviderLoginDetails.__super__.constructor.apply(this, arguments);
    }

    ProviderLoginDetails.prototype.tableName = 'provider_login_details';

    ProviderLoginDetails.prototype.hasTimestamps = true;

    ProviderLoginDetails.prototype.user = function() {
      return this.belongsTo(User);
    };

    ProviderLoginDetails.tableName = 'provider_login_details';

    ProviderLoginDetails.createTable = function(t) {
      t.string('id').primary();
      t.string('provider');
      t.string('access_token').index().unique();
      t.text('data');
      t.timestamps();
      return t.integer('user_id').unsigned().references('id').inTable('users');
    };

    return ProviderLoginDetails;

  })(bookshelf.Model);

  App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.tableName = 'apps';

    App.prototype.hasTimestamps = true;

    App.prototype.user = function() {
      return this.belongsTo(User);
    };

    App.prototype.services = function() {
      return this.hasMany(Service);
    };

    App.prototype.provider_id_secrets = function() {
      return this.hasMany(ProviderIDSecret);
    };

    App.tableName = 'apps';

    App.createTable = function(t) {
      t.increments('id');
      t.timestamps();
      t.string('name');
      return t.integer('user_id').unsigned().references('id').inTable('users');
    };

    return App;

  })(bookshelf.Model);

  ProviderIDSecret = (function(_super) {
    __extends(ProviderIDSecret, _super);

    function ProviderIDSecret() {
      return ProviderIDSecret.__super__.constructor.apply(this, arguments);
    }

    ProviderIDSecret.prototype.tableName = 'provider_id_secrets';

    ProviderIDSecret.prototype.hasTimestamps = true;

    ProviderIDSecret.prototype.app = function() {
      return this.belongsTo(App);
    };

    ProviderIDSecret.tableName = 'provider_id_secrets';

    ProviderIDSecret.createTable = function(t) {
      t.increments('id');
      t.timestamps();
      t.string('client_id');
      t.string('client_secret');
      return t.integer('app_id').unsigned().references('id').inTable('apps');
    };

    return ProviderIDSecret;

  })(bookshelf.Model);

  Service = (function(_super) {
    __extends(Service, _super);

    function Service() {
      return Service.__super__.constructor.apply(this, arguments);
    }

    Service.prototype.tableName = 'services';

    Service.prototype.hasTimestamps = true;

    Service.prototype.app = function() {
      return this.belongsTo(App);
    };

    Service.tableName = 'services';

    Service.createTable = function(t) {
      t.increments('id');
      t.timestamps();
      t.string('name');
      t.string('address');
      t.string('port');
      return t.integer('app_id').unsigned().references('id').inTable('apps');
    };

    return Service;

  })(bookshelf.Model);

  global.bookshelf = bookshelf;

  module.exports.User = User;

  module.exports.ProviderLoginDetails = ProviderLoginDetails;

  module.exports.App = App;

  module.exports.ProviderIDSecret = ProviderIDSecret;

  module.exports.Service = Service;

}).call(this);
