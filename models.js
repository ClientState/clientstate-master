// Generated by CoffeeScript 1.8.0
(function() {
  var App, ProviderIDSecret, ProviderLoginDetails, Service, User, bookshelf, docker,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require('./conn');

  bookshelf = require('bookshelf')(knexion);

  docker = require('./docker');

  User = (function(_super) {
    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.tableName = 'users';

    User.prototype.hasTimestamps = true;

    User.prototype.logins = function() {
      return this.hasMany(ProviderLoginDetails);
    };

    User.tableName = 'users';

    User.createTable = function(t) {
      t.increments('id');
      t.timestamps();
    };

    return User;

  })(bookshelf.Model);

  ProviderLoginDetails = (function(_super) {
    __extends(ProviderLoginDetails, _super);

    function ProviderLoginDetails() {
      return ProviderLoginDetails.__super__.constructor.apply(this, arguments);
    }

    ProviderLoginDetails.prototype.tableName = 'provider_login_details';

    ProviderLoginDetails.prototype.hasTimestamps = true;

    ProviderLoginDetails.prototype.user = function() {
      return this.belongsTo(User);
    };

    ProviderLoginDetails.tableName = 'provider_login_details';

    ProviderLoginDetails.createTable = function(t) {
      t.string('id').primary();
      t.string('provider');
      t.string('access_token').index().unique();
      t.text('data');
      t.timestamps();
      t.integer('user_id').unsigned().references('id').inTable('users');
    };

    return ProviderLoginDetails;

  })(bookshelf.Model);

  App = (function(_super) {
    __extends(App, _super);

    function App() {
      this._create_redis = __bind(this._create_redis, this);
      this.create_new_service = __bind(this.create_new_service, this);
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.tableName = 'apps';

    App.prototype.hasTimestamps = true;

    App.prototype.user = function() {
      return this.belongsTo(User);
    };

    App.prototype.services = function() {
      return this.hasMany(Service);
    };

    App.prototype.provider_id_secrets = function() {
      return this.hasMany(ProviderIDSecret);
    };

    App.prototype.create_new_service = function(opts, cb) {
      if ((opts.type === "redis") || (opts.type === void 0)) {
        return this._create_redis(opts, cb);
      }
    };

    App.prototype._create_redis = function(opts, cb) {
      var self;
      console.log(opts);
      self = this;
      return new Service({
        app_id: this.id,
        type: opts.type
      }).save(null, {
        method: "insert"
      }).then(function(service) {

        /*
         * Assume that we have an images named
         *     skyl/clientstate-redis
         *     redis images
         * can build from the submodule - docker/clientstate-redis
         * Assume we have a docker client instantiated with Env variables
         *
         * Run redis and link to skyl/clientstate-redis
         *
         * https://docs.docker.com/reference/api/docker_remote_api_v1.15/#create-a-container
         * https://docs.docker.com/reference/api/docker_remote_api_v1.15/#start-a-container
         */
        var redis_create_options;
        redis_create_options = {
          "Image": "redis",
          "ExposedPorts": {
            "6379/tcp": {}
          }
        };
        return docker.createContainer(redis_create_options, function(err, redisContainer) {
          var redis_start_options;
          redis_start_options = {
            "PortBindings": {
              "6379/tcp": {}
            },
            "PublishAllPorts": true
          };
          return redisContainer.start(redis_start_options, function(err, data) {
            var GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET, OAUTH_REDIRECT_URL, pis_mod, _i, _len, _ref;
            _ref = self.relations.provider_id_secrets.models;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              pis_mod = _ref[_i];
              if (pis_mod.get('provider') === "github") {
                GITHUB_CLIENT_ID = pis_mod.get('client_id');
                GITHUB_CLIENT_SECRET = pis_mod.get('client_secret');
                OAUTH_REDIRECT_URL = pis_mod.get('oauth_redirect_url');
                break;
              }
            }
            return redisContainer.inspect(function(err, rcInfo) {
              var cs_create_options;
              cs_create_options = {
                "Image": "skyl/clientstate-redis",
                "ExposedPorts": {
                  "3000/tcp": {}
                },
                Env: ["GITHUB_CLIENT_ID=" + GITHUB_CLIENT_ID, "GITHUB_CLIENT_SECRET=" + GITHUB_CLIENT_SECRET, "OAUTH_REDIRECT_URL=" + OAUTH_REDIRECT_URL, "DEBUG=yes"]
              };
              return docker.createContainer(cs_create_options, function(err, csContainer) {
                var cs_start_options;
                cs_start_options = {
                  "Links": ["" + rcInfo.Name + ":redis"],
                  "PortBindings": {
                    "3000/tcp": {}
                  },
                  "PublishAllPorts": true
                };
                return csContainer.start(cs_start_options, function(err, data) {
                  cb(service);
                });
              });
            });
          });
        });
      });
    };

    App.tableName = 'apps';

    App.createTable = function(t) {
      t.string('id').primary();
      t.timestamps();
      t.string('name');
      t.integer('user_id').unsigned().references('id').inTable('users');
    };

    return App;

  })(bookshelf.Model);

  ProviderIDSecret = (function(_super) {
    __extends(ProviderIDSecret, _super);

    function ProviderIDSecret() {
      return ProviderIDSecret.__super__.constructor.apply(this, arguments);
    }

    ProviderIDSecret.prototype.tableName = 'provider_id_secrets';

    ProviderIDSecret.prototype.hasTimestamps = true;

    ProviderIDSecret.prototype.app = function() {
      return this.belongsTo(App);
    };

    ProviderIDSecret.tableName = 'provider_id_secrets';

    ProviderIDSecret.createTable = function(t) {
      t.increments('id');
      t.timestamps();
      t.string('provider');
      t.string('client_id');
      t.string('client_secret');
      t.string('oauth_redirect_url');
      t.string('app_id').references('id').inTable('apps');
    };

    return ProviderIDSecret;

  })(bookshelf.Model);

  Service = (function(_super) {
    __extends(Service, _super);

    function Service() {
      return Service.__super__.constructor.apply(this, arguments);
    }

    Service.prototype.tableName = 'services';

    Service.prototype.hasTimestamps = true;

    Service.prototype.app = function() {
      return this.belongsTo(App);
    };

    Service.tableName = 'services';

    Service.createTable = function(t) {
      t.increments('id');
      t.timestamps();
      t.string('type');
      t.string('name');
      t.string('address');
      t.string('port');
      t.string('app_id').references('id').inTable('apps');
    };

    return Service;

  })(bookshelf.Model);

  global.bookshelf = bookshelf;

  module.exports.User = User;

  module.exports.ProviderLoginDetails = ProviderLoginDetails;

  module.exports.App = App;

  module.exports.ProviderIDSecret = ProviderIDSecret;

  module.exports.Service = Service;

}).call(this);
