// Generated by CoffeeScript 1.8.0
(function() {
  var app, auth, bodyParser, express, mod, oauth, server;

  express = require('express');

  app = express();

  oauth = require('oauth-express');

  mod = require('./models');

  bodyParser = require('body-parser');

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.get('/auth/:provider', oauth.handlers.auth_provider_redirect);

  app.get('/auth_callback/:provider', oauth.handlers.auth_callback);

  oauth.emitters.github.on('complete', require("./oauth-events").github_complete);

  app.use("/public", express["static"]("" + __dirname + "/public"));

  app.use("/lib", express["static"]("" + __dirname + "/bower_components"));

  app.use("/", express["static"]("" + __dirname + "/views"));

  auth = function(req, res, next) {
    var abort;
    abort = function() {
      res.status(403).write("valid access_token header required");
      return res.send();
    };
    if (req.headers.access_token === void 0) {
      abort();
    }
    return (new mod.ProviderLoginDetails({
      access_token: req.headers.access_token
    })).fetch({
      withRelated: ['user']
    }).then(function(pld) {
      var user;
      if (pld === null) {
        abort();
        return;
      }
      user = pld.related('user');
      if (user) {
        req.user = user;
        next();
      } else {
        abort();
      }
    });
  };

  app.use(auth);

  app.get("/apps", function(req, res) {
    return new mod.App({
      user_id: req.user.id
    }).fetchAll().then(function(collection) {
      res.send(collection.toJSON());
    });
  });

  app.post("/apps", function(req, res) {
    app = new mod.App({
      name: req.body.name,
      user_id: req.user.id
    });
    return app.save().then(function() {
      res.send("OK");
    });
  });

  server = app.listen(4000, function() {
    return console.log('Listening on port %d', server.address().port);
  });

  module.exports.app = app;

}).call(this);
