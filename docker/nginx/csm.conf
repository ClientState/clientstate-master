daemon off;
worker_processes  1;
events {
  worker_connections  1024;
}

env CSM_SERVER_NAME;
env CSM_PORT_4000_TCP_ADDR;
env CSM_PORT_4000_TCP_PORT;

env REDIS_PORT_6379_TCP_ADDR;
env REDIS_PORT_6379_TCP_PORT;


http {
  #include       mime.types;
  default_type application/octet-stream;
  sendfile on;
  keepalive_timeout 65;

  log_format shorty 'RA: $remote_addr - HH: $http_host - APPID: $appid ::'
                    '$remote_user [$time_local] ::'
                    '"$request" $status $bytes_sent ::'
                    '"$http_referer"';
  error_log /dev/stdout info;
  access_log /dev/stdout shorty;

  underscores_in_headers on;

  server {
    listen 80;
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl;
    # http://www.akadia.com/services/ssh_test_certificate.html
    ssl_certificate /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;
    ssl_prefer_server_ciphers on;

    set $CSM_SERVER_NAME '';
    set $CSM_PORT_4000_TCP_ADDR '';
    set $CSM_PORT_4000_TCP_PORT '';
    set_by_lua $CSM_SERVER_NAME 'return os.getenv("CSM_SERVER_NAME")';
    set_by_lua $CSM_PORT_4000_TCP_ADDR 'return os.getenv("CSM_PORT_4000_TCP_ADDR")';
    set_by_lua $CSM_PORT_4000_TCP_PORT 'return os.getenv("CSM_PORT_4000_TCP_PORT")';

    server_name $CSM_SERVER_NAME;

    location / {
      proxy_pass http://$CSM_PORT_4000_TCP_ADDR:$CSM_PORT_4000_TCP_PORT;
      proxy_pass_request_headers on;
    }
  }

  server {
    listen 443 ssl;
    ssl_certificate /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;
    ssl_prefer_server_ciphers on;

    # TODO - how do you use the variable?
    #set $CSM_SERVER_NAME '';
    #set_by_lua $CSM_SERVER_NAME 'return os.getenv("CSM_SERVER_NAME")';
    #server_name ~^(?<appid>.+)\.$$CSM_SERVER_NAME;
    server_name "~^(?<appid>.+)\.clientstate\.local$";

    location / {
      set $backend '';
      # with appid variable, find backend by asking redis for this key
      access_by_lua '
      local redis = require "resty.redis"
      local red = redis:new()
      red:connect(os.getenv("REDIS_PORT_6379_TCP_ADDR"), os.getenv("REDIS_PORT_6379_TCP_PORT"))
      local res, err = red:get(ngx.var.appid)
      ngx.var.backend = res
      ';
      proxy_pass http://$backend;
      # CORS headers set by the backend
    }
  }
}
