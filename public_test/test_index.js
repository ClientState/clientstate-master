// Generated by CoffeeScript 1.8.0
(function() {
  window.OAuth = {
    calls: {
      initialize: 0,
      setOAuthdURL: 0,
      popup: 0
    },
    initialize: function() {
      return this.calls.initialize += 1;
    },
    setOAuthdURL: function() {
      return this.calls.setOAuthdURL += 1;
    },
    popup: function(provider, cb) {
      this.calls.popup += 1;
      return cb(null, {
        access_token: "ABC"
      });
    }
  };

  describe('CSMController tests', function() {
    beforeEach(module('CSMApp'));
    beforeEach(inject(function($controller, $rootScope, _$httpBackend_) {
      var ctrl, scope;
      window.$httpBackend = _$httpBackend_;
      $httpBackend.when("GET", "/apps").respond([{}, {}, {}]);
      $httpBackend.when("POST", "/apps").respond("OK");
      scope = $rootScope.$new();
      return ctrl = $controller('CSMController', {
        $scope: scope
      });
    }));
    it('github login calls OAuth.popup', function(done) {
      assert.equal(scope.$storage.github_access_token, void 0);
      scope.github_login();
      assert.equal(OAuth.calls.popup, 1);
      assert.equal(scope.$storage.github_access_token, "ABC");
      return done();
    });
    it('logout logs out', function(done) {
      scope.$storage.github_access_token = "foobar";
      scope.logout();
      assert.equal(scope.$storage.github_access_token, void 0);
      return done();
    });
    it('makes scope.apps the response of get /apps', function(done) {
      scope.get_apps(function() {
        assert.equal(scope.apps.length, 3);
        return done();
      });
      return $httpBackend.flush();
    });
    it('post to create_new_app sets newAppName to blank', function(done) {
      scope.newAppName = "this";
      scope.create_new_app(function() {
        assert.equal(scope.newAppName, "");
        assert.equal(scope.apps.length, 3);
        return done();
      });
      return $httpBackend.flush();
    });
  });

}).call(this);
