// Generated by CoffeeScript 1.8.0
(function() {
  var MockContainer, MockDocker, MockRedisClient, uuid;

  uuid = {
    v4: function() {
      return "other-uuid";
    }
  };

  MockContainer = (function() {
    function MockContainer() {}

    MockContainer.prototype.callCounts = {
      start: 0,
      inspect: 0
    };

    MockContainer.prototype.start = function(opts, cb) {
      this.callCounts.start += 1;
      return cb();
    };

    MockContainer.prototype.inspect = function(cb) {
      var info;
      this.callCounts.inspect += 1;
      info = {
        Id: Math.random().toString().substr(2, 5),
        Name: "mock_container",
        NetworkSettings: {
          Ports: {
            '3000/tcp': [
              {
                HostIp: '0.0.0.0',
                HostPort: '49220'
              }
            ]
          }
        }
      };
      return cb(null, info);
    };

    return MockContainer;

  })();

  MockDocker = (function() {
    function MockDocker() {}

    MockDocker.prototype.callCounts = {
      createContainer: 0
    };

    MockDocker.prototype.createContainer = function(opts, cb) {
      this.callCounts.createContainer += 1;
      return cb(null, new MockContainer());
    };

    MockDocker.prototype.reset = function() {
      var k, v, _ref, _results;
      _ref = this.callCounts;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(this.callCounts[k] = 0);
      }
      return _results;
    };

    return MockDocker;

  })();

  MockRedisClient = (function() {
    function MockRedisClient() {}

    MockRedisClient.prototype.callCounts = {
      set: 0,
      get: 0
    };

    MockRedisClient.prototype.set = function(key, value, cb) {
      if (cb == null) {
        cb = function() {};
      }
      this.callCounts.set += 1;
      return cb();
    };

    MockRedisClient.prototype.get = function(key) {
      this.callCounts.get += 1;
      return cb('XXX.X.X.X:YYYY');
    };

    return MockRedisClient;

  })();

  module.exports = function() {
    global.uuid = uuid;
    global.docker = new MockDocker();
    return global.redis_client = new MockRedisClient();
  };

}).call(this);
